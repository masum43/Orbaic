// Generated by view binder compiler. Do not edit!
package com.orbaic.miner.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textfield.TextInputLayout;
import com.orbaic.miner.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentWithdrawalBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final RecyclerView RecyclerView;

  @NonNull
  public final TextView cashOutLoginDateShow;

  @NonNull
  public final TextView cashOutLoginPoint;

  @NonNull
  public final EditText cashOutMethodInput;

  @NonNull
  public final EditText cashOutNumberInput;

  @NonNull
  public final LinearLayout cashOutPageFstLinearLayout;

  @NonNull
  public final EditText cashOutPointInput;

  @NonNull
  public final Button cashOutSubmit;

  @NonNull
  public final TextView cashOutUsername;

  @NonNull
  public final RelativeLayout frameLayout;

  @NonNull
  public final TextInputLayout h;

  @NonNull
  public final TextInputLayout i;

  @NonNull
  public final TextInputLayout j;

  private FragmentWithdrawalBinding(@NonNull RelativeLayout rootView,
      @NonNull RecyclerView RecyclerView, @NonNull TextView cashOutLoginDateShow,
      @NonNull TextView cashOutLoginPoint, @NonNull EditText cashOutMethodInput,
      @NonNull EditText cashOutNumberInput, @NonNull LinearLayout cashOutPageFstLinearLayout,
      @NonNull EditText cashOutPointInput, @NonNull Button cashOutSubmit,
      @NonNull TextView cashOutUsername, @NonNull RelativeLayout frameLayout,
      @NonNull TextInputLayout h, @NonNull TextInputLayout i, @NonNull TextInputLayout j) {
    this.rootView = rootView;
    this.RecyclerView = RecyclerView;
    this.cashOutLoginDateShow = cashOutLoginDateShow;
    this.cashOutLoginPoint = cashOutLoginPoint;
    this.cashOutMethodInput = cashOutMethodInput;
    this.cashOutNumberInput = cashOutNumberInput;
    this.cashOutPageFstLinearLayout = cashOutPageFstLinearLayout;
    this.cashOutPointInput = cashOutPointInput;
    this.cashOutSubmit = cashOutSubmit;
    this.cashOutUsername = cashOutUsername;
    this.frameLayout = frameLayout;
    this.h = h;
    this.i = i;
    this.j = j;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentWithdrawalBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentWithdrawalBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_withdrawal, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentWithdrawalBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.RecyclerView;
      RecyclerView RecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (RecyclerView == null) {
        break missingId;
      }

      id = R.id.cashOut_login_date_show;
      TextView cashOutLoginDateShow = ViewBindings.findChildViewById(rootView, id);
      if (cashOutLoginDateShow == null) {
        break missingId;
      }

      id = R.id.cashOut_login_point;
      TextView cashOutLoginPoint = ViewBindings.findChildViewById(rootView, id);
      if (cashOutLoginPoint == null) {
        break missingId;
      }

      id = R.id.cashOut_method_input;
      EditText cashOutMethodInput = ViewBindings.findChildViewById(rootView, id);
      if (cashOutMethodInput == null) {
        break missingId;
      }

      id = R.id.cashOut_number_input;
      EditText cashOutNumberInput = ViewBindings.findChildViewById(rootView, id);
      if (cashOutNumberInput == null) {
        break missingId;
      }

      id = R.id.cashOut_page_fst_LinearLayout;
      LinearLayout cashOutPageFstLinearLayout = ViewBindings.findChildViewById(rootView, id);
      if (cashOutPageFstLinearLayout == null) {
        break missingId;
      }

      id = R.id.cashOut_point_input;
      EditText cashOutPointInput = ViewBindings.findChildViewById(rootView, id);
      if (cashOutPointInput == null) {
        break missingId;
      }

      id = R.id.cashOut_submit;
      Button cashOutSubmit = ViewBindings.findChildViewById(rootView, id);
      if (cashOutSubmit == null) {
        break missingId;
      }

      id = R.id.cashOut_username;
      TextView cashOutUsername = ViewBindings.findChildViewById(rootView, id);
      if (cashOutUsername == null) {
        break missingId;
      }

      RelativeLayout frameLayout = (RelativeLayout) rootView;

      id = R.id.h;
      TextInputLayout h = ViewBindings.findChildViewById(rootView, id);
      if (h == null) {
        break missingId;
      }

      id = R.id.i;
      TextInputLayout i = ViewBindings.findChildViewById(rootView, id);
      if (i == null) {
        break missingId;
      }

      id = R.id.j;
      TextInputLayout j = ViewBindings.findChildViewById(rootView, id);
      if (j == null) {
        break missingId;
      }

      return new FragmentWithdrawalBinding((RelativeLayout) rootView, RecyclerView,
          cashOutLoginDateShow, cashOutLoginPoint, cashOutMethodInput, cashOutNumberInput,
          cashOutPageFstLinearLayout, cashOutPointInput, cashOutSubmit, cashOutUsername,
          frameLayout, h, i, j);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
