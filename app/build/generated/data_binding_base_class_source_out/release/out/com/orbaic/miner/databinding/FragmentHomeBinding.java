// Generated by view binder compiler. Do not edit!
package com.orbaic.miner.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.orbaic.miner.R;
import com.skyfishjy.library.RippleBackground;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentHomeBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final TextView aciCoin;

  @NonNull
  public final ImageView centerImage;

  @NonNull
  public final LinearLayout claimRewardLayout;

  @NonNull
  public final RippleBackground content;

  @NonNull
  public final ProgressBar earnRewardProgressBar;

  @NonNull
  public final RecyclerView gridViewId;

  @NonNull
  public final TextView hourFragment;

  @NonNull
  public final LinearLayout learnAndEarn;

  @NonNull
  public final LinearLayout learnAvailable;

  @NonNull
  public final LinearLayout mining;

  @NonNull
  public final LinearLayout quizWaitingLayout;

  @NonNull
  public final ProgressBar quizWaitingProgressBar;

  @NonNull
  public final RecyclerView recyclerView;

  @NonNull
  public final LinearLayout waitingRewardLayout;

  private FragmentHomeBinding(@NonNull NestedScrollView rootView, @NonNull TextView aciCoin,
      @NonNull ImageView centerImage, @NonNull LinearLayout claimRewardLayout,
      @NonNull RippleBackground content, @NonNull ProgressBar earnRewardProgressBar,
      @NonNull RecyclerView gridViewId, @NonNull TextView hourFragment,
      @NonNull LinearLayout learnAndEarn, @NonNull LinearLayout learnAvailable,
      @NonNull LinearLayout mining, @NonNull LinearLayout quizWaitingLayout,
      @NonNull ProgressBar quizWaitingProgressBar, @NonNull RecyclerView recyclerView,
      @NonNull LinearLayout waitingRewardLayout) {
    this.rootView = rootView;
    this.aciCoin = aciCoin;
    this.centerImage = centerImage;
    this.claimRewardLayout = claimRewardLayout;
    this.content = content;
    this.earnRewardProgressBar = earnRewardProgressBar;
    this.gridViewId = gridViewId;
    this.hourFragment = hourFragment;
    this.learnAndEarn = learnAndEarn;
    this.learnAvailable = learnAvailable;
    this.mining = mining;
    this.quizWaitingLayout = quizWaitingLayout;
    this.quizWaitingProgressBar = quizWaitingProgressBar;
    this.recyclerView = recyclerView;
    this.waitingRewardLayout = waitingRewardLayout;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_home, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentHomeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.aci_coin;
      TextView aciCoin = ViewBindings.findChildViewById(rootView, id);
      if (aciCoin == null) {
        break missingId;
      }

      id = R.id.centerImage;
      ImageView centerImage = ViewBindings.findChildViewById(rootView, id);
      if (centerImage == null) {
        break missingId;
      }

      id = R.id.claimRewardLayout;
      LinearLayout claimRewardLayout = ViewBindings.findChildViewById(rootView, id);
      if (claimRewardLayout == null) {
        break missingId;
      }

      id = R.id.content;
      RippleBackground content = ViewBindings.findChildViewById(rootView, id);
      if (content == null) {
        break missingId;
      }

      id = R.id.earnRewardProgressBar;
      ProgressBar earnRewardProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (earnRewardProgressBar == null) {
        break missingId;
      }

      id = R.id.gridViewId;
      RecyclerView gridViewId = ViewBindings.findChildViewById(rootView, id);
      if (gridViewId == null) {
        break missingId;
      }

      id = R.id.hour_fragment;
      TextView hourFragment = ViewBindings.findChildViewById(rootView, id);
      if (hourFragment == null) {
        break missingId;
      }

      id = R.id.learnAndEarn;
      LinearLayout learnAndEarn = ViewBindings.findChildViewById(rootView, id);
      if (learnAndEarn == null) {
        break missingId;
      }

      id = R.id.learnAvailable;
      LinearLayout learnAvailable = ViewBindings.findChildViewById(rootView, id);
      if (learnAvailable == null) {
        break missingId;
      }

      id = R.id.mining;
      LinearLayout mining = ViewBindings.findChildViewById(rootView, id);
      if (mining == null) {
        break missingId;
      }

      id = R.id.quizWaitingLayout;
      LinearLayout quizWaitingLayout = ViewBindings.findChildViewById(rootView, id);
      if (quizWaitingLayout == null) {
        break missingId;
      }

      id = R.id.quizWaitingProgressBar;
      ProgressBar quizWaitingProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (quizWaitingProgressBar == null) {
        break missingId;
      }

      id = R.id.recyclerView;
      RecyclerView recyclerView = ViewBindings.findChildViewById(rootView, id);
      if (recyclerView == null) {
        break missingId;
      }

      id = R.id.waitingRewardLayout;
      LinearLayout waitingRewardLayout = ViewBindings.findChildViewById(rootView, id);
      if (waitingRewardLayout == null) {
        break missingId;
      }

      return new FragmentHomeBinding((NestedScrollView) rootView, aciCoin, centerImage,
          claimRewardLayout, content, earnRewardProgressBar, gridViewId, hourFragment, learnAndEarn,
          learnAvailable, mining, quizWaitingLayout, quizWaitingProgressBar, recyclerView,
          waitingRewardLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
